// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cura.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Cura.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cura {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ObjectList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Slice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Slice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* Progress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Progress_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlicedObjectList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlicedObjectList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlicedObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlicedObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polygon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GCodeLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCodeLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectPrintTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectPrintTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Setting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Setting_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCodePrefix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCodePrefix_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Cura_2eproto() {
  protobuf_AddDesc_Cura_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Cura.proto");
  GOOGLE_CHECK(file != NULL);
  ObjectList_descriptor_ = file->message_type(0);
  static const int ObjectList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, settings_),
  };
  ObjectList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectList_descriptor_,
      ObjectList::default_instance_,
      ObjectList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectList, _is_default_instance_));
  Slice_descriptor_ = file->message_type(1);
  static const int Slice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, object_lists_),
  };
  Slice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Slice_descriptor_,
      Slice::default_instance_,
      Slice_offsets_,
      -1,
      -1,
      -1,
      sizeof(Slice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slice, _is_default_instance_));
  Object_descriptor_ = file->message_type(2);
  static const int Object_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, settings_),
  };
  Object_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      -1,
      -1,
      -1,
      sizeof(Object),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _is_default_instance_));
  Progress_descriptor_ = file->message_type(3);
  static const int Progress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, amount_),
  };
  Progress_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Progress_descriptor_,
      Progress::default_instance_,
      Progress_offsets_,
      -1,
      -1,
      -1,
      sizeof(Progress),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Progress, _is_default_instance_));
  SlicedObjectList_descriptor_ = file->message_type(4);
  static const int SlicedObjectList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicedObjectList, objects_),
  };
  SlicedObjectList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SlicedObjectList_descriptor_,
      SlicedObjectList::default_instance_,
      SlicedObjectList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SlicedObjectList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicedObjectList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicedObjectList, _is_default_instance_));
  SlicedObject_descriptor_ = file->message_type(5);
  static const int SlicedObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicedObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicedObject, layers_),
  };
  SlicedObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SlicedObject_descriptor_,
      SlicedObject::default_instance_,
      SlicedObject_offsets_,
      -1,
      -1,
      -1,
      sizeof(SlicedObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicedObject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlicedObject, _is_default_instance_));
  Layer_descriptor_ = file->message_type(6);
  static const int Layer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, polygons_),
  };
  Layer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Layer_descriptor_,
      Layer::default_instance_,
      Layer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Layer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _is_default_instance_));
  Polygon_descriptor_ = file->message_type(7);
  static const int Polygon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, line_width_),
  };
  Polygon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Polygon_descriptor_,
      Polygon::default_instance_,
      Polygon_offsets_,
      -1,
      -1,
      -1,
      sizeof(Polygon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _is_default_instance_));
  Polygon_Type_descriptor_ = Polygon_descriptor_->enum_type(0);
  GCodeLayer_descriptor_ = file->message_type(8);
  static const int GCodeLayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodeLayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodeLayer, data_),
  };
  GCodeLayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GCodeLayer_descriptor_,
      GCodeLayer::default_instance_,
      GCodeLayer_offsets_,
      -1,
      -1,
      -1,
      sizeof(GCodeLayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodeLayer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodeLayer, _is_default_instance_));
  ObjectPrintTime_descriptor_ = file->message_type(9);
  static const int ObjectPrintTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPrintTime, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPrintTime, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPrintTime, material_amount_),
  };
  ObjectPrintTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObjectPrintTime_descriptor_,
      ObjectPrintTime::default_instance_,
      ObjectPrintTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(ObjectPrintTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPrintTime, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPrintTime, _is_default_instance_));
  SettingList_descriptor_ = file->message_type(10);
  static const int SettingList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingList, settings_),
  };
  SettingList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SettingList_descriptor_,
      SettingList::default_instance_,
      SettingList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SettingList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingList, _is_default_instance_));
  Setting_descriptor_ = file->message_type(11);
  static const int Setting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, value_),
  };
  Setting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Setting_descriptor_,
      Setting::default_instance_,
      Setting_offsets_,
      -1,
      -1,
      -1,
      sizeof(Setting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Setting, _is_default_instance_));
  GCodePrefix_descriptor_ = file->message_type(12);
  static const int GCodePrefix_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodePrefix, data_),
  };
  GCodePrefix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GCodePrefix_descriptor_,
      GCodePrefix::default_instance_,
      GCodePrefix_offsets_,
      -1,
      -1,
      -1,
      sizeof(GCodePrefix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodePrefix, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCodePrefix, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Cura_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectList_descriptor_, &ObjectList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Slice_descriptor_, &Slice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Progress_descriptor_, &Progress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SlicedObjectList_descriptor_, &SlicedObjectList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SlicedObject_descriptor_, &SlicedObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Layer_descriptor_, &Layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Polygon_descriptor_, &Polygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GCodeLayer_descriptor_, &GCodeLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObjectPrintTime_descriptor_, &ObjectPrintTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SettingList_descriptor_, &SettingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Setting_descriptor_, &Setting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GCodePrefix_descriptor_, &GCodePrefix::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Cura_2eproto() {
  delete ObjectList::default_instance_;
  delete ObjectList_reflection_;
  delete Slice::default_instance_;
  delete Slice_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete Progress::default_instance_;
  delete Progress_reflection_;
  delete SlicedObjectList::default_instance_;
  delete SlicedObjectList_reflection_;
  delete SlicedObject::default_instance_;
  delete SlicedObject_reflection_;
  delete Layer::default_instance_;
  delete Layer_reflection_;
  delete Polygon::default_instance_;
  delete Polygon_reflection_;
  delete GCodeLayer::default_instance_;
  delete GCodeLayer_reflection_;
  delete ObjectPrintTime::default_instance_;
  delete ObjectPrintTime_reflection_;
  delete SettingList::default_instance_;
  delete SettingList_reflection_;
  delete Setting::default_instance_;
  delete Setting_reflection_;
  delete GCodePrefix::default_instance_;
  delete GCodePrefix_reflection_;
}

void protobuf_AddDesc_Cura_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nCura.proto\022\ncura.proto\"X\n\nObjectList\022#"
    "\n\007objects\030\001 \003(\0132\022.cura.proto.Object\022%\n\010s"
    "ettings\030\002 \003(\0132\023.cura.proto.Setting\"5\n\005Sl"
    "ice\022,\n\014object_lists\030\001 \003(\0132\026.cura.proto.O"
    "bjectList\"o\n\006Object\022\n\n\002id\030\001 \001(\003\022\020\n\010verti"
    "ces\030\002 \001(\014\022\017\n\007normals\030\003 \001(\014\022\017\n\007indices\030\004 "
    "\001(\014\022%\n\010settings\030\005 \003(\0132\023.cura.proto.Setti"
    "ng\"\032\n\010Progress\022\016\n\006amount\030\001 \001(\002\"=\n\020Sliced"
    "ObjectList\022)\n\007objects\030\001 \003(\0132\030.cura.proto"
    ".SlicedObject\"=\n\014SlicedObject\022\n\n\002id\030\001 \001("
    "\003\022!\n\006layers\030\002 \003(\0132\021.cura.proto.Layer\"]\n\005"
    "Layer\022\n\n\002id\030\001 \001(\005\022\016\n\006height\030\002 \001(\002\022\021\n\tthi"
    "ckness\030\003 \001(\002\022%\n\010polygons\030\004 \003(\0132\023.cura.pr"
    "oto.Polygon\"\216\002\n\007Polygon\022&\n\004type\030\001 \001(\0162\030."
    "cura.proto.Polygon.Type\022\016\n\006points\030\002 \001(\014\022"
    "\022\n\nline_width\030\003 \001(\002\"\266\001\n\004Type\022\014\n\010NoneType"
    "\020\000\022\016\n\nInset0Type\020\001\022\016\n\nInsetXType\020\002\022\014\n\010Sk"
    "inType\020\003\022\017\n\013SupportType\020\004\022\r\n\tSkirtType\020\005"
    "\022\016\n\nInfillType\020\006\022\025\n\021SupportInfillType\020\007\022"
    "\023\n\017MoveCombingType\020\010\022\026\n\022MoveRetractionTy"
    "pe\020\t\"&\n\nGCodeLayer\022\n\n\002id\030\001 \001(\003\022\014\n\004data\030\002"
    " \001(\014\"D\n\017ObjectPrintTime\022\n\n\002id\030\001 \001(\003\022\014\n\004t"
    "ime\030\002 \001(\002\022\027\n\017material_amount\030\003 \001(\002\"4\n\013Se"
    "ttingList\022%\n\010settings\030\001 \003(\0132\023.cura.proto"
    ".Setting\"&\n\007Setting\022\014\n\004name\030\001 \001(\t\022\r\n\005val"
    "ue\030\002 \001(\014\"\033\n\013GCodePrefix\022\014\n\004data\030\002 \001(\014b\006p"
    "roto3", 1045);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Cura.proto", &protobuf_RegisterTypes);
  ObjectList::default_instance_ = new ObjectList();
  Slice::default_instance_ = new Slice();
  Object::default_instance_ = new Object();
  Progress::default_instance_ = new Progress();
  SlicedObjectList::default_instance_ = new SlicedObjectList();
  SlicedObject::default_instance_ = new SlicedObject();
  Layer::default_instance_ = new Layer();
  Polygon::default_instance_ = new Polygon();
  GCodeLayer::default_instance_ = new GCodeLayer();
  ObjectPrintTime::default_instance_ = new ObjectPrintTime();
  SettingList::default_instance_ = new SettingList();
  Setting::default_instance_ = new Setting();
  GCodePrefix::default_instance_ = new GCodePrefix();
  ObjectList::default_instance_->InitAsDefaultInstance();
  Slice::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  Progress::default_instance_->InitAsDefaultInstance();
  SlicedObjectList::default_instance_->InitAsDefaultInstance();
  SlicedObject::default_instance_->InitAsDefaultInstance();
  Layer::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  GCodeLayer::default_instance_->InitAsDefaultInstance();
  ObjectPrintTime::default_instance_->InitAsDefaultInstance();
  SettingList::default_instance_->InitAsDefaultInstance();
  Setting::default_instance_->InitAsDefaultInstance();
  GCodePrefix::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Cura_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Cura_2eproto {
  StaticDescriptorInitializer_Cura_2eproto() {
    protobuf_AddDesc_Cura_2eproto();
  }
} static_descriptor_initializer_Cura_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ObjectList::kObjectsFieldNumber;
const int ObjectList::kSettingsFieldNumber;
#endif  // !_MSC_VER

ObjectList::ObjectList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.ObjectList)
}

void ObjectList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ObjectList::ObjectList(const ObjectList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.ObjectList)
}

void ObjectList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ObjectList::~ObjectList() {
  // @@protoc_insertion_point(destructor:cura.proto.ObjectList)
  SharedDtor();
}

void ObjectList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectList_descriptor_;
}

const ObjectList& ObjectList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

ObjectList* ObjectList::default_instance_ = NULL;

ObjectList* ObjectList::New(::google::protobuf::Arena* arena) const {
  ObjectList* n = new ObjectList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectList::Clear() {
  objects_.Clear();
  settings_.Clear();
}

bool ObjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.ObjectList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cura.proto.Object objects = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_objects;
        if (input->ExpectTag(18)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .cura.proto.Setting settings = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.ObjectList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.ObjectList)
  return false;
#undef DO_
}

void ObjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.ObjectList)
  // repeated .cura.proto.Object objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // repeated .cura.proto.Setting settings = 2;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.ObjectList)
}

::google::protobuf::uint8* ObjectList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.ObjectList)
  // repeated .cura.proto.Object objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  // repeated .cura.proto.Setting settings = 2;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.ObjectList)
  return target;
}

int ObjectList::ByteSize() const {
  int total_size = 0;

  // repeated .cura.proto.Object objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  // repeated .cura.proto.Setting settings = 2;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ObjectList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectList::MergeFrom(const ObjectList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  objects_.MergeFrom(from.objects_);
  settings_.MergeFrom(from.settings_);
}

void ObjectList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectList::CopyFrom(const ObjectList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectList::IsInitialized() const {

  return true;
}

void ObjectList::Swap(ObjectList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectList::InternalSwap(ObjectList* other) {
  objects_.UnsafeArenaSwap(&other->objects_);
  settings_.UnsafeArenaSwap(&other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectList_descriptor_;
  metadata.reflection = ObjectList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectList

// repeated .cura.proto.Object objects = 1;
int ObjectList::objects_size() const {
  return objects_.size();
}
void ObjectList::clear_objects() {
  objects_.Clear();
}
const ::cura::proto::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.objects)
  return objects_.Get(index);
}
::cura::proto::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.objects)
  return objects_.Mutable(index);
}
::cura::proto::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.objects)
  return objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.objects)
  return &objects_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.objects)
  return objects_;
}

// repeated .cura.proto.Setting settings = 2;
int ObjectList::settings_size() const {
  return settings_.size();
}
void ObjectList::clear_settings() {
  settings_.Clear();
}
const ::cura::proto::Setting& ObjectList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectList.settings)
  return settings_.Get(index);
}
::cura::proto::Setting* ObjectList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.ObjectList.settings)
  return settings_.Mutable(index);
}
::cura::proto::Setting* ObjectList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.ObjectList.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
ObjectList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.ObjectList.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
ObjectList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.ObjectList.settings)
  return settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Slice::kObjectListsFieldNumber;
#endif  // !_MSC_VER

Slice::Slice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Slice)
}

void Slice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Slice::Slice(const Slice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Slice)
}

void Slice::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Slice::~Slice() {
  // @@protoc_insertion_point(destructor:cura.proto.Slice)
  SharedDtor();
}

void Slice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Slice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Slice_descriptor_;
}

const Slice& Slice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Slice* Slice::default_instance_ = NULL;

Slice* Slice::New(::google::protobuf::Arena* arena) const {
  Slice* n = new Slice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Slice::Clear() {
  object_lists_.Clear();
}

bool Slice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Slice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cura.proto.ObjectList object_lists = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_object_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object_lists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_object_lists;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Slice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Slice)
  return false;
#undef DO_
}

void Slice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Slice)
  // repeated .cura.proto.ObjectList object_lists = 1;
  for (unsigned int i = 0, n = this->object_lists_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_lists(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Slice)
}

::google::protobuf::uint8* Slice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Slice)
  // repeated .cura.proto.ObjectList object_lists = 1;
  for (unsigned int i = 0, n = this->object_lists_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object_lists(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Slice)
  return target;
}

int Slice::ByteSize() const {
  int total_size = 0;

  // repeated .cura.proto.ObjectList object_lists = 1;
  total_size += 1 * this->object_lists_size();
  for (int i = 0; i < this->object_lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_lists(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slice::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Slice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Slice>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Slice::MergeFrom(const Slice& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  object_lists_.MergeFrom(from.object_lists_);
}

void Slice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slice::CopyFrom(const Slice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slice::IsInitialized() const {

  return true;
}

void Slice::Swap(Slice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Slice::InternalSwap(Slice* other) {
  object_lists_.UnsafeArenaSwap(&other->object_lists_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Slice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Slice_descriptor_;
  metadata.reflection = Slice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Slice

// repeated .cura.proto.ObjectList object_lists = 1;
int Slice::object_lists_size() const {
  return object_lists_.size();
}
void Slice::clear_object_lists() {
  object_lists_.Clear();
}
const ::cura::proto::ObjectList& Slice::object_lists(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Slice.object_lists)
  return object_lists_.Get(index);
}
::cura::proto::ObjectList* Slice::mutable_object_lists(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Slice.object_lists)
  return object_lists_.Mutable(index);
}
::cura::proto::ObjectList* Slice::add_object_lists() {
  // @@protoc_insertion_point(field_add:cura.proto.Slice.object_lists)
  return object_lists_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >*
Slice::mutable_object_lists() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Slice.object_lists)
  return &object_lists_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::ObjectList >&
Slice::object_lists() const {
  // @@protoc_insertion_point(field_list:cura.proto.Slice.object_lists)
  return object_lists_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Object::kIdFieldNumber;
const int Object::kVerticesFieldNumber;
const int Object::kNormalsFieldNumber;
const int Object::kIndicesFieldNumber;
const int Object::kSettingsFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Object)
}

void Object::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Object::Object(const Object& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Object)
}

void Object::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  vertices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:cura.proto.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  vertices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // optional bytes vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normals;
        break;
      }

      // optional bytes normals = 3;
      case 3: {
        if (tag == 26) {
         parse_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_indices;
        break;
      }

      // optional bytes indices = 4;
      case 4: {
        if (tag == 34) {
         parse_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_settings;
        break;
      }

      // repeated .cura.proto.Setting settings = 5;
      case 5: {
        if (tag == 42) {
         parse_settings:
          DO_(input->IncrementRecursionDepth());
         parse_loop_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Object)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes vertices = 2;
  if (this->vertices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vertices(), output);
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->normals(), output);
  }

  // optional bytes indices = 4;
  if (this->indices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->indices(), output);
  }

  // repeated .cura.proto.Setting settings = 5;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->settings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Object)
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Object)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes vertices = 2;
  if (this->vertices().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vertices(), target);
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->normals(), target);
  }

  // optional bytes indices = 4;
  if (this->indices().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->indices(), target);
  }

  // repeated .cura.proto.Setting settings = 5;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->settings(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Object)
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional bytes vertices = 2;
  if (this->vertices().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->vertices());
  }

  // optional bytes normals = 3;
  if (this->normals().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->normals());
  }

  // optional bytes indices = 4;
  if (this->indices().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->indices());
  }

  // repeated .cura.proto.Setting settings = 5;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Object* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  settings_.MergeFrom(from.settings_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.vertices().size() > 0) {

    vertices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertices_);
  }
  if (from.normals().size() > 0) {

    normals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_);
  }
  if (from.indices().size() > 0) {

    indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indices_);
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {

  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  std::swap(id_, other->id_);
  vertices_.Swap(&other->vertices_);
  normals_.Swap(&other->normals_);
  indices_.Swap(&other->indices_);
  settings_.UnsafeArenaSwap(&other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// optional int64 id = 1;
void Object::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Object::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.id)
  return id_;
}
 void Object::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Object.id)
}

// optional bytes vertices = 2;
void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.vertices)
  return vertices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_vertices(const ::std::string& value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.vertices)
}
 void Object::set_vertices(const char* value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.vertices)
}
 void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.vertices)
}
 ::std::string* Object::mutable_vertices() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.vertices)
  return vertices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_vertices() {
  
  return vertices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_vertices(::std::string* vertices) {
  if (vertices != NULL) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.vertices)
}

// optional bytes normals = 3;
void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.normals)
  return normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.normals)
}
 void Object::set_normals(const char* value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.normals)
}
 void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.normals)
}
 ::std::string* Object::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_normals() {
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.normals)
}

// optional bytes indices = 4;
void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.indices)
  return indices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Object.indices)
}
 void Object::set_indices(const char* value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Object.indices)
}
 void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Object.indices)
}
 ::std::string* Object::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Object::release_indices() {
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Object::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Object.indices)
}

// repeated .cura.proto.Setting settings = 5;
int Object::settings_size() const {
  return settings_.size();
}
void Object::clear_settings() {
  settings_.Clear();
}
const ::cura::proto::Setting& Object::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Object.settings)
  return settings_.Get(index);
}
::cura::proto::Setting* Object::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Object.settings)
  return settings_.Mutable(index);
}
::cura::proto::Setting* Object::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.Object.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
Object::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Object.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
Object::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.Object.settings)
  return settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Progress::kAmountFieldNumber;
#endif  // !_MSC_VER

Progress::Progress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Progress)
}

void Progress::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Progress::Progress(const Progress& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Progress)
}

void Progress::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  amount_ = 0;
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:cura.proto.Progress)
  SharedDtor();
}

void Progress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Progress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Progress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Progress_descriptor_;
}

const Progress& Progress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Progress* Progress::default_instance_ = NULL;

Progress* Progress::New(::google::protobuf::Arena* arena) const {
  Progress* n = new Progress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Progress::Clear() {
  amount_ = 0;
}

bool Progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Progress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float amount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Progress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Progress)
  return false;
#undef DO_
}

void Progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Progress)
  // optional float amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Progress)
}

::google::protobuf::uint8* Progress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Progress)
  // optional float amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Progress)
  return target;
}

int Progress::ByteSize() const {
  int total_size = 0;

  // optional float amount = 1;
  if (this->amount() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Progress::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Progress* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Progress>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Progress::MergeFrom(const Progress& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void Progress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Progress::CopyFrom(const Progress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {

  return true;
}

void Progress::Swap(Progress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Progress::InternalSwap(Progress* other) {
  std::swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Progress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Progress_descriptor_;
  metadata.reflection = Progress_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Progress

// optional float amount = 1;
void Progress::clear_amount() {
  amount_ = 0;
}
 float Progress::amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.Progress.amount)
  return amount_;
}
 void Progress::set_amount(float value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Progress.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SlicedObjectList::kObjectsFieldNumber;
#endif  // !_MSC_VER

SlicedObjectList::SlicedObjectList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SlicedObjectList)
}

void SlicedObjectList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SlicedObjectList::SlicedObjectList(const SlicedObjectList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SlicedObjectList)
}

void SlicedObjectList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SlicedObjectList::~SlicedObjectList() {
  // @@protoc_insertion_point(destructor:cura.proto.SlicedObjectList)
  SharedDtor();
}

void SlicedObjectList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlicedObjectList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlicedObjectList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlicedObjectList_descriptor_;
}

const SlicedObjectList& SlicedObjectList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

SlicedObjectList* SlicedObjectList::default_instance_ = NULL;

SlicedObjectList* SlicedObjectList::New(::google::protobuf::Arena* arena) const {
  SlicedObjectList* n = new SlicedObjectList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlicedObjectList::Clear() {
  objects_.Clear();
}

bool SlicedObjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.SlicedObjectList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cura.proto.SlicedObject objects = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_objects;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.SlicedObjectList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.SlicedObjectList)
  return false;
#undef DO_
}

void SlicedObjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.SlicedObjectList)
  // repeated .cura.proto.SlicedObject objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.SlicedObjectList)
}

::google::protobuf::uint8* SlicedObjectList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SlicedObjectList)
  // repeated .cura.proto.SlicedObject objects = 1;
  for (unsigned int i = 0, n = this->objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SlicedObjectList)
  return target;
}

int SlicedObjectList::ByteSize() const {
  int total_size = 0;

  // repeated .cura.proto.SlicedObject objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlicedObjectList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SlicedObjectList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SlicedObjectList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlicedObjectList::MergeFrom(const SlicedObjectList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  objects_.MergeFrom(from.objects_);
}

void SlicedObjectList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlicedObjectList::CopyFrom(const SlicedObjectList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlicedObjectList::IsInitialized() const {

  return true;
}

void SlicedObjectList::Swap(SlicedObjectList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlicedObjectList::InternalSwap(SlicedObjectList* other) {
  objects_.UnsafeArenaSwap(&other->objects_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlicedObjectList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlicedObjectList_descriptor_;
  metadata.reflection = SlicedObjectList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlicedObjectList

// repeated .cura.proto.SlicedObject objects = 1;
int SlicedObjectList::objects_size() const {
  return objects_.size();
}
void SlicedObjectList::clear_objects() {
  objects_.Clear();
}
const ::cura::proto::SlicedObject& SlicedObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.SlicedObjectList.objects)
  return objects_.Get(index);
}
::cura::proto::SlicedObject* SlicedObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.SlicedObjectList.objects)
  return objects_.Mutable(index);
}
::cura::proto::SlicedObject* SlicedObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:cura.proto.SlicedObjectList.objects)
  return objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::SlicedObject >*
SlicedObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.SlicedObjectList.objects)
  return &objects_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::SlicedObject >&
SlicedObjectList::objects() const {
  // @@protoc_insertion_point(field_list:cura.proto.SlicedObjectList.objects)
  return objects_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SlicedObject::kIdFieldNumber;
const int SlicedObject::kLayersFieldNumber;
#endif  // !_MSC_VER

SlicedObject::SlicedObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SlicedObject)
}

void SlicedObject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SlicedObject::SlicedObject(const SlicedObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SlicedObject)
}

void SlicedObject::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
}

SlicedObject::~SlicedObject() {
  // @@protoc_insertion_point(destructor:cura.proto.SlicedObject)
  SharedDtor();
}

void SlicedObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlicedObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlicedObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlicedObject_descriptor_;
}

const SlicedObject& SlicedObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

SlicedObject* SlicedObject::default_instance_ = NULL;

SlicedObject* SlicedObject::New(::google::protobuf::Arena* arena) const {
  SlicedObject* n = new SlicedObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SlicedObject::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  layers_.Clear();
}

bool SlicedObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.SlicedObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .cura.proto.Layer layers = 2;
      case 2: {
        if (tag == 18) {
         parse_layers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_layers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.SlicedObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.SlicedObject)
  return false;
#undef DO_
}

void SlicedObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.SlicedObject)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .cura.proto.Layer layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.SlicedObject)
}

::google::protobuf::uint8* SlicedObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SlicedObject)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .cura.proto.Layer layers = 2;
  for (unsigned int i = 0, n = this->layers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SlicedObject)
  return target;
}

int SlicedObject::ByteSize() const {
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // repeated .cura.proto.Layer layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlicedObject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SlicedObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SlicedObject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlicedObject::MergeFrom(const SlicedObject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  layers_.MergeFrom(from.layers_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void SlicedObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlicedObject::CopyFrom(const SlicedObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlicedObject::IsInitialized() const {

  return true;
}

void SlicedObject::Swap(SlicedObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlicedObject::InternalSwap(SlicedObject* other) {
  std::swap(id_, other->id_);
  layers_.UnsafeArenaSwap(&other->layers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SlicedObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlicedObject_descriptor_;
  metadata.reflection = SlicedObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SlicedObject

// optional int64 id = 1;
void SlicedObject::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SlicedObject::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.SlicedObject.id)
  return id_;
}
 void SlicedObject::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.SlicedObject.id)
}

// repeated .cura.proto.Layer layers = 2;
int SlicedObject::layers_size() const {
  return layers_.size();
}
void SlicedObject::clear_layers() {
  layers_.Clear();
}
const ::cura::proto::Layer& SlicedObject::layers(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.SlicedObject.layers)
  return layers_.Get(index);
}
::cura::proto::Layer* SlicedObject::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.SlicedObject.layers)
  return layers_.Mutable(index);
}
::cura::proto::Layer* SlicedObject::add_layers() {
  // @@protoc_insertion_point(field_add:cura.proto.SlicedObject.layers)
  return layers_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Layer >*
SlicedObject::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.SlicedObject.layers)
  return &layers_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Layer >&
SlicedObject::layers() const {
  // @@protoc_insertion_point(field_list:cura.proto.SlicedObject.layers)
  return layers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Layer::kIdFieldNumber;
const int Layer::kHeightFieldNumber;
const int Layer::kThicknessFieldNumber;
const int Layer::kPolygonsFieldNumber;
#endif  // !_MSC_VER

Layer::Layer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Layer)
}

void Layer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Layer)
}

void Layer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  height_ = 0;
  thickness_ = 0;
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:cura.proto.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_descriptor_;
}

const Layer& Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New(::google::protobuf::Arena* arena) const {
  Layer* n = new Layer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Layer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Layer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, height_);
  thickness_ = 0;

#undef ZR_HELPER_
#undef ZR_

  polygons_.Clear();
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (tag == 21) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_thickness;
        break;
      }

      // optional float thickness = 3;
      case 3: {
        if (tag == 29) {
         parse_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thickness_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_polygons;
        break;
      }

      // repeated .cura.proto.Polygon polygons = 4;
      case 4: {
        if (tag == 34) {
         parse_polygons:
          DO_(input->IncrementRecursionDepth());
         parse_loop_polygons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_polygons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_polygons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Layer)
  return false;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Layer)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->thickness(), output);
  }

  // repeated .cura.proto.Polygon polygons = 4;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->polygons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Layer)
}

::google::protobuf::uint8* Layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Layer)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->thickness(), target);
  }

  // repeated .cura.proto.Polygon polygons = 4;
  for (unsigned int i = 0, n = this->polygons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->polygons(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Layer)
  return target;
}

int Layer::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional float height = 2;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // optional float thickness = 3;
  if (this->thickness() != 0) {
    total_size += 1 + 4;
  }

  // repeated .cura.proto.Polygon polygons = 4;
  total_size += 1 * this->polygons_size();
  for (int i = 0; i < this->polygons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Layer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Layer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  polygons_.MergeFrom(from.polygons_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.thickness() != 0) {
    set_thickness(from.thickness());
  }
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {

  return true;
}

void Layer::Swap(Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layer::InternalSwap(Layer* other) {
  std::swap(id_, other->id_);
  std::swap(height_, other->height_);
  std::swap(thickness_, other->thickness_);
  polygons_.UnsafeArenaSwap(&other->polygons_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layer_descriptor_;
  metadata.reflection = Layer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layer

// optional int32 id = 1;
void Layer::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Layer::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.id)
  return id_;
}
 void Layer::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.id)
}

// optional float height = 2;
void Layer::clear_height() {
  height_ = 0;
}
 float Layer::height() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.height)
  return height_;
}
 void Layer::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.height)
}

// optional float thickness = 3;
void Layer::clear_thickness() {
  thickness_ = 0;
}
 float Layer::thickness() const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.thickness)
  return thickness_;
}
 void Layer::set_thickness(float value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Layer.thickness)
}

// repeated .cura.proto.Polygon polygons = 4;
int Layer::polygons_size() const {
  return polygons_.size();
}
void Layer::clear_polygons() {
  polygons_.Clear();
}
const ::cura::proto::Polygon& Layer::polygons(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.Layer.polygons)
  return polygons_.Get(index);
}
::cura::proto::Polygon* Layer::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.Layer.polygons)
  return polygons_.Mutable(index);
}
::cura::proto::Polygon* Layer::add_polygons() {
  // @@protoc_insertion_point(field_add:cura.proto.Layer.polygons)
  return polygons_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >*
Layer::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.Layer.polygons)
  return &polygons_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Polygon >&
Layer::polygons() const {
  // @@protoc_insertion_point(field_list:cura.proto.Layer.polygons)
  return polygons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_Type_descriptor_;
}
bool Polygon_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Polygon_Type Polygon::NoneType;
const Polygon_Type Polygon::Inset0Type;
const Polygon_Type Polygon::InsetXType;
const Polygon_Type Polygon::SkinType;
const Polygon_Type Polygon::SupportType;
const Polygon_Type Polygon::SkirtType;
const Polygon_Type Polygon::InfillType;
const Polygon_Type Polygon::SupportInfillType;
const Polygon_Type Polygon::MoveCombingType;
const Polygon_Type Polygon::MoveRetractionType;
const Polygon_Type Polygon::Type_MIN;
const Polygon_Type Polygon::Type_MAX;
const int Polygon::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Polygon::kTypeFieldNumber;
const int Polygon::kPointsFieldNumber;
const int Polygon::kLineWidthFieldNumber;
#endif  // !_MSC_VER

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Polygon)
}

void Polygon::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Polygon)
}

void Polygon::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  points_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_width_ = 0;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:cura.proto.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  points_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polygon_descriptor_;
}

const Polygon& Polygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Polygon*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, line_width_);
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cura.proto.Polygon.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cura::proto::Polygon_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_points;
        break;
      }

      // optional bytes points = 2;
      case 2: {
        if (tag == 18) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_line_width;
        break;
      }

      // optional float line_width = 3;
      case 3: {
        if (tag == 29) {
         parse_line_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Polygon)
  // optional .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes points = 2;
  if (this->points().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->points(), output);
  }

  // optional float line_width = 3;
  if (this->line_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->line_width(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Polygon)
}

::google::protobuf::uint8* Polygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Polygon)
  // optional .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes points = 2;
  if (this->points().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->points(), target);
  }

  // optional float line_width = 3;
  if (this->line_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->line_width(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Polygon)
  return target;
}

int Polygon::ByteSize() const {
  int total_size = 0;

  // optional .cura.proto.Polygon.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bytes points = 2;
  if (this->points().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->points());
  }

  // optional float line_width = 3;
  if (this->line_width() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Polygon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.points().size() > 0) {

    points_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.points_);
  }
  if (from.line_width() != 0) {
    set_line_width(from.line_width());
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  std::swap(type_, other->type_);
  points_.Swap(&other->points_);
  std::swap(line_width_, other->line_width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polygon_descriptor_;
  metadata.reflection = Polygon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// optional .cura.proto.Polygon.Type type = 1;
void Polygon::clear_type() {
  type_ = 0;
}
 ::cura::proto::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.type)
  return static_cast< ::cura::proto::Polygon_Type >(type_);
}
 void Polygon::set_type(::cura::proto::Polygon_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.type)
}

// optional bytes points = 2;
void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.points)
  return points_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Polygon::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.points)
}
 void Polygon::set_points(const char* value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Polygon.points)
}
 void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Polygon.points)
}
 ::std::string* Polygon::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Polygon.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Polygon::release_points() {
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Polygon::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Polygon.points)
}

// optional float line_width = 3;
void Polygon::clear_line_width() {
  line_width_ = 0;
}
 float Polygon::line_width() const {
  // @@protoc_insertion_point(field_get:cura.proto.Polygon.line_width)
  return line_width_;
}
 void Polygon::set_line_width(float value) {
  
  line_width_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.Polygon.line_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GCodeLayer::kIdFieldNumber;
const int GCodeLayer::kDataFieldNumber;
#endif  // !_MSC_VER

GCodeLayer::GCodeLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.GCodeLayer)
}

void GCodeLayer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GCodeLayer::GCodeLayer(const GCodeLayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.GCodeLayer)
}

void GCodeLayer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GCodeLayer::~GCodeLayer() {
  // @@protoc_insertion_point(destructor:cura.proto.GCodeLayer)
  SharedDtor();
}

void GCodeLayer::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GCodeLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCodeLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCodeLayer_descriptor_;
}

const GCodeLayer& GCodeLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

GCodeLayer* GCodeLayer::default_instance_ = NULL;

GCodeLayer* GCodeLayer::New(::google::protobuf::Arena* arena) const {
  GCodeLayer* n = new GCodeLayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCodeLayer::Clear() {
  id_ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GCodeLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.GCodeLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.GCodeLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.GCodeLayer)
  return false;
#undef DO_
}

void GCodeLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.GCodeLayer)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.GCodeLayer)
}

::google::protobuf::uint8* GCodeLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.GCodeLayer)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.GCodeLayer)
  return target;
}

int GCodeLayer::ByteSize() const {
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCodeLayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GCodeLayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GCodeLayer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCodeLayer::MergeFrom(const GCodeLayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void GCodeLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCodeLayer::CopyFrom(const GCodeLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCodeLayer::IsInitialized() const {

  return true;
}

void GCodeLayer::Swap(GCodeLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCodeLayer::InternalSwap(GCodeLayer* other) {
  std::swap(id_, other->id_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCodeLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCodeLayer_descriptor_;
  metadata.reflection = GCodeLayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCodeLayer

// optional int64 id = 1;
void GCodeLayer::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GCodeLayer::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodeLayer.id)
  return id_;
}
 void GCodeLayer::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.GCodeLayer.id)
}

// optional bytes data = 2;
void GCodeLayer::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GCodeLayer::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodeLayer.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodeLayer::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodeLayer.data)
}
 void GCodeLayer::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodeLayer.data)
}
 void GCodeLayer::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodeLayer.data)
}
 ::std::string* GCodeLayer::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodeLayer.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GCodeLayer::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodeLayer::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodeLayer.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ObjectPrintTime::kIdFieldNumber;
const int ObjectPrintTime::kTimeFieldNumber;
const int ObjectPrintTime::kMaterialAmountFieldNumber;
#endif  // !_MSC_VER

ObjectPrintTime::ObjectPrintTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.ObjectPrintTime)
}

void ObjectPrintTime::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ObjectPrintTime::ObjectPrintTime(const ObjectPrintTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.ObjectPrintTime)
}

void ObjectPrintTime::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  time_ = 0;
  material_amount_ = 0;
}

ObjectPrintTime::~ObjectPrintTime() {
  // @@protoc_insertion_point(destructor:cura.proto.ObjectPrintTime)
  SharedDtor();
}

void ObjectPrintTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectPrintTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPrintTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectPrintTime_descriptor_;
}

const ObjectPrintTime& ObjectPrintTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

ObjectPrintTime* ObjectPrintTime::default_instance_ = NULL;

ObjectPrintTime* ObjectPrintTime::New(::google::protobuf::Arena* arena) const {
  ObjectPrintTime* n = new ObjectPrintTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPrintTime::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ObjectPrintTime*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, material_amount_);

#undef ZR_HELPER_
#undef ZR_

}

bool ObjectPrintTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.ObjectPrintTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_time;
        break;
      }

      // optional float time = 2;
      case 2: {
        if (tag == 21) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_material_amount;
        break;
      }

      // optional float material_amount = 3;
      case 3: {
        if (tag == 29) {
         parse_material_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &material_amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.ObjectPrintTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.ObjectPrintTime)
  return false;
#undef DO_
}

void ObjectPrintTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.ObjectPrintTime)
  // optional int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional float time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }

  // optional float material_amount = 3;
  if (this->material_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->material_amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.ObjectPrintTime)
}

::google::protobuf::uint8* ObjectPrintTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.ObjectPrintTime)
  // optional int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional float time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }

  // optional float material_amount = 3;
  if (this->material_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->material_amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.ObjectPrintTime)
  return target;
}

int ObjectPrintTime::ByteSize() const {
  int total_size = 0;

  // optional int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional float time = 2;
  if (this->time() != 0) {
    total_size += 1 + 4;
  }

  // optional float material_amount = 3;
  if (this->material_amount() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPrintTime::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ObjectPrintTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPrintTime>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectPrintTime::MergeFrom(const ObjectPrintTime& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.material_amount() != 0) {
    set_material_amount(from.material_amount());
  }
}

void ObjectPrintTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPrintTime::CopyFrom(const ObjectPrintTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPrintTime::IsInitialized() const {

  return true;
}

void ObjectPrintTime::Swap(ObjectPrintTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPrintTime::InternalSwap(ObjectPrintTime* other) {
  std::swap(id_, other->id_);
  std::swap(time_, other->time_);
  std::swap(material_amount_, other->material_amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPrintTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectPrintTime_descriptor_;
  metadata.reflection = ObjectPrintTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPrintTime

// optional int64 id = 1;
void ObjectPrintTime::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ObjectPrintTime::id() const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectPrintTime.id)
  return id_;
}
 void ObjectPrintTime::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.ObjectPrintTime.id)
}

// optional float time = 2;
void ObjectPrintTime::clear_time() {
  time_ = 0;
}
 float ObjectPrintTime::time() const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectPrintTime.time)
  return time_;
}
 void ObjectPrintTime::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.ObjectPrintTime.time)
}

// optional float material_amount = 3;
void ObjectPrintTime::clear_material_amount() {
  material_amount_ = 0;
}
 float ObjectPrintTime::material_amount() const {
  // @@protoc_insertion_point(field_get:cura.proto.ObjectPrintTime.material_amount)
  return material_amount_;
}
 void ObjectPrintTime::set_material_amount(float value) {
  
  material_amount_ = value;
  // @@protoc_insertion_point(field_set:cura.proto.ObjectPrintTime.material_amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SettingList::kSettingsFieldNumber;
#endif  // !_MSC_VER

SettingList::SettingList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.SettingList)
}

void SettingList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SettingList::SettingList(const SettingList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.SettingList)
}

void SettingList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SettingList::~SettingList() {
  // @@protoc_insertion_point(destructor:cura.proto.SettingList)
  SharedDtor();
}

void SettingList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SettingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingList_descriptor_;
}

const SettingList& SettingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

SettingList* SettingList::default_instance_ = NULL;

SettingList* SettingList::New(::google::protobuf::Arena* arena) const {
  SettingList* n = new SettingList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SettingList::Clear() {
  settings_.Clear();
}

bool SettingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.SettingList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cura.proto.Setting settings = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_settings;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.SettingList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.SettingList)
  return false;
#undef DO_
}

void SettingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.SettingList)
  // repeated .cura.proto.Setting settings = 1;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->settings(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.SettingList)
}

::google::protobuf::uint8* SettingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.SettingList)
  // repeated .cura.proto.Setting settings = 1;
  for (unsigned int i = 0, n = this->settings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->settings(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.SettingList)
  return target;
}

int SettingList::ByteSize() const {
  int total_size = 0;

  // repeated .cura.proto.Setting settings = 1;
  total_size += 1 * this->settings_size();
  for (int i = 0; i < this->settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->settings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SettingList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SettingList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettingList::MergeFrom(const SettingList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  settings_.MergeFrom(from.settings_);
}

void SettingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingList::CopyFrom(const SettingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingList::IsInitialized() const {

  return true;
}

void SettingList::Swap(SettingList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingList::InternalSwap(SettingList* other) {
  settings_.UnsafeArenaSwap(&other->settings_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SettingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingList_descriptor_;
  metadata.reflection = SettingList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SettingList

// repeated .cura.proto.Setting settings = 1;
int SettingList::settings_size() const {
  return settings_.size();
}
void SettingList::clear_settings() {
  settings_.Clear();
}
const ::cura::proto::Setting& SettingList::settings(int index) const {
  // @@protoc_insertion_point(field_get:cura.proto.SettingList.settings)
  return settings_.Get(index);
}
::cura::proto::Setting* SettingList::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:cura.proto.SettingList.settings)
  return settings_.Mutable(index);
}
::cura::proto::Setting* SettingList::add_settings() {
  // @@protoc_insertion_point(field_add:cura.proto.SettingList.settings)
  return settings_.Add();
}
::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >*
SettingList::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:cura.proto.SettingList.settings)
  return &settings_;
}
const ::google::protobuf::RepeatedPtrField< ::cura::proto::Setting >&
SettingList::settings() const {
  // @@protoc_insertion_point(field_list:cura.proto.SettingList.settings)
  return settings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Setting::kNameFieldNumber;
const int Setting::kValueFieldNumber;
#endif  // !_MSC_VER

Setting::Setting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.Setting)
}

void Setting::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Setting::Setting(const Setting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.Setting)
}

void Setting::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Setting::~Setting() {
  // @@protoc_insertion_point(destructor:cura.proto.Setting)
  SharedDtor();
}

void Setting::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Setting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Setting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Setting_descriptor_;
}

const Setting& Setting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

Setting* Setting::default_instance_ = NULL;

Setting* Setting::New(::google::protobuf::Arena* arena) const {
  Setting* n = new Setting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Setting::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.Setting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cura.proto.Setting.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.Setting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.Setting)
  return false;
#undef DO_
}

void Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.Setting)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Setting.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.Setting)
}

::google::protobuf::uint8* Setting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.Setting)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cura.proto.Setting.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.Setting)
  return target;
}

int Setting::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Setting::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Setting* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Setting>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Setting::MergeFrom(const Setting& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Setting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting::CopyFrom(const Setting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting::IsInitialized() const {

  return true;
}

void Setting::Swap(Setting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Setting::InternalSwap(Setting* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Setting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Setting_descriptor_;
  metadata.reflection = Setting_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Setting

// optional string name = 1;
void Setting::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Setting::name() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.name)
}
 void Setting::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.name)
}
 void Setting::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.name)
}
 ::std::string* Setting::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Setting::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.name)
}

// optional bytes value = 2;
void Setting::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Setting::value() const {
  // @@protoc_insertion_point(field_get:cura.proto.Setting.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.Setting.value)
}
 void Setting::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.Setting.value)
}
 void Setting::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.Setting.value)
}
 ::std::string* Setting::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.Setting.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Setting::release_value() {
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Setting::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.Setting.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GCodePrefix::kDataFieldNumber;
#endif  // !_MSC_VER

GCodePrefix::GCodePrefix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cura.proto.GCodePrefix)
}

void GCodePrefix::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GCodePrefix::GCodePrefix(const GCodePrefix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cura.proto.GCodePrefix)
}

void GCodePrefix::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GCodePrefix::~GCodePrefix() {
  // @@protoc_insertion_point(destructor:cura.proto.GCodePrefix)
  SharedDtor();
}

void GCodePrefix::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GCodePrefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCodePrefix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCodePrefix_descriptor_;
}

const GCodePrefix& GCodePrefix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cura_2eproto();
  return *default_instance_;
}

GCodePrefix* GCodePrefix::default_instance_ = NULL;

GCodePrefix* GCodePrefix::New(::google::protobuf::Arena* arena) const {
  GCodePrefix* n = new GCodePrefix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCodePrefix::Clear() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GCodePrefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cura.proto.GCodePrefix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cura.proto.GCodePrefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cura.proto.GCodePrefix)
  return false;
#undef DO_
}

void GCodePrefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cura.proto.GCodePrefix)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:cura.proto.GCodePrefix)
}

::google::protobuf::uint8* GCodePrefix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cura.proto.GCodePrefix)
  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cura.proto.GCodePrefix)
  return target;
}

int GCodePrefix::ByteSize() const {
  int total_size = 0;

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCodePrefix::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GCodePrefix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GCodePrefix>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCodePrefix::MergeFrom(const GCodePrefix& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void GCodePrefix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCodePrefix::CopyFrom(const GCodePrefix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCodePrefix::IsInitialized() const {

  return true;
}

void GCodePrefix::Swap(GCodePrefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCodePrefix::InternalSwap(GCodePrefix* other) {
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCodePrefix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCodePrefix_descriptor_;
  metadata.reflection = GCodePrefix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCodePrefix

// optional bytes data = 2;
void GCodePrefix::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GCodePrefix::data() const {
  // @@protoc_insertion_point(field_get:cura.proto.GCodePrefix.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodePrefix::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cura.proto.GCodePrefix.data)
}
 void GCodePrefix::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cura.proto.GCodePrefix.data)
}
 void GCodePrefix::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cura.proto.GCodePrefix.data)
}
 ::std::string* GCodePrefix::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cura.proto.GCodePrefix.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GCodePrefix::release_data() {
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GCodePrefix::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cura.proto.GCodePrefix.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cura

// @@protoc_insertion_point(global_scope)
