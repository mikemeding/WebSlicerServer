// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef PROTOBUF_example_2eproto__INCLUDED
#define PROTOBUF_example_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Example {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_example_2eproto();
void protobuf_AssignDesc_example_2eproto();
void protobuf_ShutdownFile_example_2eproto();

class Object;
class ObjectList;
class Polygon;
class ProgressUpdate;
class SlicedObject;
class SlicedObjectList;

// ===================================================================

class ObjectList : public ::google::protobuf::Message {
 public:
  ObjectList();
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectList& default_instance();

  void Swap(ObjectList* other);

  // implements Message ----------------------------------------------

  inline ObjectList* New() const { return New(NULL); }

  ObjectList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Example.Object objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  const ::Example::Object& objects(int index) const;
  ::Example::Object* mutable_objects(int index);
  ::Example::Object* add_objects();
  ::google::protobuf::RepeatedPtrField< ::Example::Object >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::Example::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Example.ObjectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Example::Object > objects_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();

  void InitAsDefaultInstance();
  static ObjectList* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  void Swap(Object* other);

  // implements Message ----------------------------------------------

  inline Object* New() const { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bytes vertices = 2;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  const ::std::string& vertices() const;
  void set_vertices(const ::std::string& value);
  void set_vertices(const char* value);
  void set_vertices(const void* value, size_t size);
  ::std::string* mutable_vertices();
  ::std::string* release_vertices();
  void set_allocated_vertices(::std::string* vertices);

  // optional bytes normals = 3;
  void clear_normals();
  static const int kNormalsFieldNumber = 3;
  const ::std::string& normals() const;
  void set_normals(const ::std::string& value);
  void set_normals(const char* value);
  void set_normals(const void* value, size_t size);
  ::std::string* mutable_normals();
  ::std::string* release_normals();
  void set_allocated_normals(::std::string* normals);

  // optional bytes indices = 4;
  void clear_indices();
  static const int kIndicesFieldNumber = 4;
  const ::std::string& indices() const;
  void set_indices(const ::std::string& value);
  void set_indices(const char* value);
  void set_indices(const void* value, size_t size);
  ::std::string* mutable_indices();
  ::std::string* release_indices();
  void set_allocated_indices(::std::string* indices);

  // @@protoc_insertion_point(class_scope:Example.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr vertices_;
  ::google::protobuf::internal::ArenaStringPtr normals_;
  ::google::protobuf::internal::ArenaStringPtr indices_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();

  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// -------------------------------------------------------------------

class ProgressUpdate : public ::google::protobuf::Message {
 public:
  ProgressUpdate();
  virtual ~ProgressUpdate();

  ProgressUpdate(const ProgressUpdate& from);

  inline ProgressUpdate& operator=(const ProgressUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgressUpdate& default_instance();

  void Swap(ProgressUpdate* other);

  // implements Message ----------------------------------------------

  inline ProgressUpdate* New() const { return New(NULL); }

  ProgressUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProgressUpdate& from);
  void MergeFrom(const ProgressUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProgressUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 objectId = 1;
  void clear_objectid();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 objectid() const;
  void set_objectid(::google::protobuf::int32 value);

  // optional int32 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Example.ProgressUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();

  void InitAsDefaultInstance();
  static ProgressUpdate* default_instance_;
};
// -------------------------------------------------------------------

class SlicedObjectList : public ::google::protobuf::Message {
 public:
  SlicedObjectList();
  virtual ~SlicedObjectList();

  SlicedObjectList(const SlicedObjectList& from);

  inline SlicedObjectList& operator=(const SlicedObjectList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlicedObjectList& default_instance();

  void Swap(SlicedObjectList* other);

  // implements Message ----------------------------------------------

  inline SlicedObjectList* New() const { return New(NULL); }

  SlicedObjectList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlicedObjectList& from);
  void MergeFrom(const SlicedObjectList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlicedObjectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Example.SlicedObject objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  const ::Example::SlicedObject& objects(int index) const;
  ::Example::SlicedObject* mutable_objects(int index);
  ::Example::SlicedObject* add_objects();
  ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Example.SlicedObjectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject > objects_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();

  void InitAsDefaultInstance();
  static SlicedObjectList* default_instance_;
};
// -------------------------------------------------------------------

class SlicedObject : public ::google::protobuf::Message {
 public:
  SlicedObject();
  virtual ~SlicedObject();

  SlicedObject(const SlicedObject& from);

  inline SlicedObject& operator=(const SlicedObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SlicedObject& default_instance();

  void Swap(SlicedObject* other);

  // implements Message ----------------------------------------------

  inline SlicedObject* New() const { return New(NULL); }

  SlicedObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SlicedObject& from);
  void MergeFrom(const SlicedObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SlicedObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // repeated .Example.Polygon polygons = 2;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 2;
  const ::Example::Polygon& polygons(int index) const;
  ::Example::Polygon* mutable_polygons(int index);
  ::Example::Polygon* add_polygons();
  ::google::protobuf::RepeatedPtrField< ::Example::Polygon >*
      mutable_polygons();
  const ::google::protobuf::RepeatedPtrField< ::Example::Polygon >&
      polygons() const;

  // @@protoc_insertion_point(class_scope:Example.SlicedObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Example::Polygon > polygons_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();

  void InitAsDefaultInstance();
  static SlicedObject* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  void Swap(Polygon* other);

  // implements Message ----------------------------------------------

  inline Polygon* New() const { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes points = 1;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::std::string& points() const;
  void set_points(const ::std::string& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  ::std::string* mutable_points();
  ::std::string* release_points();
  void set_allocated_points(::std::string* points);

  // @@protoc_insertion_point(class_scope:Example.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr points_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_example_2eproto();
  friend void protobuf_AssignDesc_example_2eproto();
  friend void protobuf_ShutdownFile_example_2eproto();

  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectList

// repeated .Example.Object objects = 1;
inline int ObjectList::objects_size() const {
  return objects_.size();
}
inline void ObjectList::clear_objects() {
  objects_.Clear();
}
inline const ::Example::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Example.ObjectList.objects)
  return objects_.Get(index);
}
inline ::Example::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Example.ObjectList.objects)
  return objects_.Mutable(index);
}
inline ::Example::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Example.ObjectList.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Example::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Example.ObjectList.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Example::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Example.ObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// Object

// optional int32 id = 1;
inline void Object::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:Example.Object.id)
  return id_;
}
inline void Object::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Example.Object.id)
}

// optional bytes vertices = 2;
inline void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:Example.Object.vertices)
  return vertices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_vertices(const ::std::string& value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Object.vertices)
}
inline void Object::set_vertices(const char* value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.vertices)
}
inline void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.vertices)
}
inline ::std::string* Object::mutable_vertices() {
  
  // @@protoc_insertion_point(field_mutable:Example.Object.vertices)
  return vertices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_vertices() {
  
  return vertices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_vertices(::std::string* vertices) {
  if (vertices != NULL) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.vertices)
}

// optional bytes normals = 3;
inline void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:Example.Object.normals)
  return normals_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Object.normals)
}
inline void Object::set_normals(const char* value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.normals)
}
inline void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.normals)
}
inline ::std::string* Object::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:Example.Object.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_normals() {
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.normals)
}

// optional bytes indices = 4;
inline void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:Example.Object.indices)
  return indices_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Object.indices)
}
inline void Object::set_indices(const char* value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.indices)
}
inline void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.indices)
}
inline ::std::string* Object::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:Example.Object.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_indices() {
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.indices)
}

// -------------------------------------------------------------------

// ProgressUpdate

// optional int32 objectId = 1;
inline void ProgressUpdate::clear_objectid() {
  objectid_ = 0;
}
inline ::google::protobuf::int32 ProgressUpdate::objectid() const {
  // @@protoc_insertion_point(field_get:Example.ProgressUpdate.objectId)
  return objectid_;
}
inline void ProgressUpdate::set_objectid(::google::protobuf::int32 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:Example.ProgressUpdate.objectId)
}

// optional int32 amount = 2;
inline void ProgressUpdate::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 ProgressUpdate::amount() const {
  // @@protoc_insertion_point(field_get:Example.ProgressUpdate.amount)
  return amount_;
}
inline void ProgressUpdate::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:Example.ProgressUpdate.amount)
}

// -------------------------------------------------------------------

// SlicedObjectList

// repeated .Example.SlicedObject objects = 1;
inline int SlicedObjectList::objects_size() const {
  return objects_.size();
}
inline void SlicedObjectList::clear_objects() {
  objects_.Clear();
}
inline const ::Example::SlicedObject& SlicedObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Example.SlicedObjectList.objects)
  return objects_.Get(index);
}
inline ::Example::SlicedObject* SlicedObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Example.SlicedObjectList.objects)
  return objects_.Mutable(index);
}
inline ::Example::SlicedObject* SlicedObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Example.SlicedObjectList.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >*
SlicedObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Example.SlicedObjectList.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >&
SlicedObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Example.SlicedObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// SlicedObject

// optional int32 id = 1;
inline void SlicedObject::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SlicedObject::id() const {
  // @@protoc_insertion_point(field_get:Example.SlicedObject.id)
  return id_;
}
inline void SlicedObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Example.SlicedObject.id)
}

// repeated .Example.Polygon polygons = 2;
inline int SlicedObject::polygons_size() const {
  return polygons_.size();
}
inline void SlicedObject::clear_polygons() {
  polygons_.Clear();
}
inline const ::Example::Polygon& SlicedObject::polygons(int index) const {
  // @@protoc_insertion_point(field_get:Example.SlicedObject.polygons)
  return polygons_.Get(index);
}
inline ::Example::Polygon* SlicedObject::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:Example.SlicedObject.polygons)
  return polygons_.Mutable(index);
}
inline ::Example::Polygon* SlicedObject::add_polygons() {
  // @@protoc_insertion_point(field_add:Example.SlicedObject.polygons)
  return polygons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Example::Polygon >*
SlicedObject::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:Example.SlicedObject.polygons)
  return &polygons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Example::Polygon >&
SlicedObject::polygons() const {
  // @@protoc_insertion_point(field_list:Example.SlicedObject.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Polygon

// optional bytes points = 1;
inline void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:Example.Polygon.points)
  return points_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Polygon.points)
}
inline void Polygon::set_points(const char* value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Polygon.points)
}
inline void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Polygon.points)
}
inline ::std::string* Polygon::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:Example.Polygon.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Polygon::release_points() {
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:Example.Polygon.points)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Example

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_example_2eproto__INCLUDED
